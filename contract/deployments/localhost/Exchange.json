{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_antTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOfToken",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokensToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minEthToReceive",
          "type": "uint256"
        }
      ],
      "name": "antToEthSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputReserve",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minTokensToReceive",
          "type": "uint256"
        }
      ],
      "name": "ethToAntSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOfLPToken",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdcefdaa2e828b413d97cf7585acf97a3367c33146b3bc7c82a733fd9e244bb23",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "1308814",
    "logsBloom": "0x
    "blockHash": "0x55f342f012b57d75f38967841c93791fa165ae7305687789cef435ac572c76bf",
    "transactionHash": "0xdcefdaa2e828b413d97cf7585acf97a3367c33146b3bc7c82a733fd9e244bb23",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xdcefdaa2e828b413d97cf7585acf97a3367c33146b3bc7c82a733fd9e244bb23",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x55f342f012b57d75f38967841c93791fa165ae7305687789cef435ac572c76bf"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "1308814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "d6cb48bf0b2a775ff5ab127eb7cbfd30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfToken\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthToReceive\",\"type\":\"uint256\"}],\"name\":\"antToEthSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReserve\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReceive\",\"type\":\"uint256\"}],\"name\":\"ethToAntSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfLPToken\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/AntToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\ncontract Ant is ERC20 {\\n    constructor() ERC20(\\\"Ant\\\", \\\"ANT\\\"){\\n        _mint(msg.sender, 1000000 * 10 ** decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x8415523543db01141bd41af4425f5972c982061ad3c74bd3ef1e9ce52bd3d08d\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport './AntToken.sol';\\r\\nimport './LPToken.sol';\\r\\n\\r\\ncontract Exchange is Ownable{\\r\\n    \\r\\n    Ant antToken;\\r\\n    LPToken lpToken;\\r\\n\\r\\n    constructor (address _lpTokenAddress, address _antTokenAddress) Ownable(msg.sender){\\r\\n        antToken = Ant(_antTokenAddress);\\r\\n        lpToken = LPToken(_lpTokenAddress);\\r\\n    }\\r\\n\\r\\n    function getReserve() public view returns(uint256) {\\r\\n        return antToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function addLiquidity (uint256 _amountOfToken) external payable returns(uint256) {\\r\\n        uint256 lpTokensToMint;\\r\\n        uint256 ethReserveBalance = address(this).balance;\\r\\n        uint256 antTokenBalance = getReserve();\\r\\n\\r\\n        if(antTokenBalance == 0) {\\r\\n           antToken.transferFrom(msg.sender, address(this), _amountOfToken);\\r\\n           lpTokensToMint = ethReserveBalance;\\r\\n           lpToken.mintLP(lpTokensToMint, msg.sender); \\r\\n           return lpTokensToMint;\\r\\n        } \\r\\n\\r\\n        uint256 ethReservePriorToFunctionCall = ethReserveBalance - msg.value;\\r\\n        uint256 minTokenAmountRequired = (msg.value * antTokenBalance) / (msg.value + ethReservePriorToFunctionCall);\\r\\n\\r\\n        require(_amountOfToken >= minTokenAmountRequired, \\\"Insufficient amount of tokens provided\\\");\\r\\n\\r\\n        antToken.transferFrom(msg.sender, address(this), minTokenAmountRequired);\\r\\n\\r\\n        lpTokensToMint = (lpToken.totalSupply() * msg.value) / ethReservePriorToFunctionCall;\\r\\n\\r\\n        lpToken.mintLP(lpTokensToMint, msg.sender);\\r\\n\\r\\n        return lpTokensToMint;\\r\\n    }\\r\\n    \\r\\n    function removeLiquidity(uint256 _amountOfLPToken) external returns(uint256, uint256) {\\r\\n        require(_amountOfLPToken > 0, \\\"Not enough Tokens\\\");\\r\\n\\r\\n        uint256 ethReserveBalance = address(this).balance;\\r\\n        uint256 lpTokenTotalSupply = lpToken.totalSupply();\\r\\n\\r\\n        uint256 ethToReturn = (ethReserveBalance * _amountOfLPToken) / lpTokenTotalSupply;\\r\\n        uint256 antTokenToReturn = (getReserve() * _amountOfLPToken) / lpTokenTotalSupply;\\r\\n\\r\\n        lpToken.burnLP(_amountOfLPToken, msg.sender);\\r\\n\\r\\n        payable(msg.sender).transfer(ethToReturn);\\r\\n        antToken.transfer(msg.sender, antTokenToReturn);\\r\\n\\r\\n        return (ethToReturn, antTokenToReturn);\\r\\n    }\\r\\n\\r\\n    function calculateSwap(\\r\\n        uint256 inputAmount,\\r\\n        uint256 inputReserve,\\r\\n        uint256 outputReserve\\r\\n    ) public pure returns(uint256) {\\r\\n      require(inputReserve > 0 && outputReserve > 0, \\\"No Liquidity!!!\\\");\\r\\n      uint256 inputAmountWithFee = inputAmount * 99;\\r\\n\\r\\n      return (inputAmountWithFee * outputReserve) / ((inputReserve * 100) + inputAmountWithFee);\\r\\n    }\\r\\n    \\r\\n    function ethToAntSwap(uint256 minTokensToReceive) external payable {\\r\\n        uint256 antTokenReserveBalance = getReserve();\\r\\n        uint256 tokensToReceive = calculateSwap(msg.value, address(this).balance - msg.value, antTokenReserveBalance);\\r\\n\\r\\n        require(tokensToReceive >= minTokensToReceive, \\\"Tokens received are less than minimum tokens expected\\\");\\r\\n       \\r\\n        antToken.transfer(msg.sender, tokensToReceive);\\r\\n    }\\r\\n\\r\\n    function antToEthSwap(uint256 tokensToSwap, uint256 minEthToReceive) external payable {\\r\\n        uint256 antTokenReserveBalance = getReserve();\\r\\n        uint256 ethToReceive = calculateSwap(tokensToSwap, antTokenReserveBalance, address(this).balance);\\r\\n        require(ethToReceive >= minEthToReceive, \\\"ETH received is less than minimum ETH expected\\\");\\r\\n\\r\\n        antToken.transferFrom(msg.sender, address(this), tokensToSwap);\\r\\n\\r\\n        payable(msg.sender).transfer(ethToReceive);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x4d7e88fa077d1f2afb43c11b9a90db01c7f9c000a763520e4b8ed06990a98595\",\"license\":\"MIT\"},\"contracts/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract LPToken is ERC20 {\\r\\n    constructor() ERC20(\\\"LPToken\\\", \\\"LPT\\\"){}\\r\\n\\r\\n    function mintLP(uint256 _amount, address _caller) external payable {\\r\\n        _mint(_caller, _amount);\\r\\n    }\\r\\n\\r\\n    function burnLP(uint256 _amount, address _caller) external payable {\\r\\n        _burn(_caller, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x812ec0c6564ca23eed0d06956311c55137411508ddaca61fded01c8f12c2e1e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161183538038061183583398181016040528101906100329190610265565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c91906102b4565b60405180910390fd5b6100b48161013e60201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506102cf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023282610207565b9050919050565b61024281610227565b811461024d57600080fd5b50565b60008151905061025f81610239565b92915050565b6000806040838503121561027c5761027b610202565b5b600061028a85828601610250565b925050602061029b85828601610250565b9150509250929050565b6102ae81610227565b82525050565b60006020820190506102c960008301846102a5565b92915050565b611557806102de6000396000f3fe60806040526004361061008a5760003560e01c8063829eff2a11610059578063829eff2a1461011b5780638da5cb5b146101375780639c8f9f2314610162578063ec6341b3146101a0578063f2fde38b146101dd5761008b565b80631c9629f81461008d57806351c6590a146100a957806359bf5d39146100d9578063715018a6146101045761008b565b5b005b6100a760048036038101906100a29190610e51565b610206565b005b6100c360048036038101906100be9190610e91565b610354565b6040516100d09190610ecd565b60405180910390f35b3480156100e557600080fd5b506100ee610712565b6040516100fb9190610ecd565b60405180910390f35b34801561011057600080fd5b506101196107b5565b005b61013560048036038101906101309190610e91565b6107c9565b005b34801561014357600080fd5b5061014c6108d8565b6040516101599190610f29565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190610e91565b610901565b604051610197929190610f44565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190610f6d565b610ba4565b6040516101d49190610ecd565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190610fec565b610c3d565b005b6000610210610712565b9050600061021f848347610ba4565b905082811015610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b9061109c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016102c3939291906110bc565b6020604051808303816000875af11580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610306919061112b565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561034d573d6000803e3d6000fd5b5050505050565b60008060004790506000610366610712565b9050600081036104b057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016103cf939291906110bc565b6020604051808303816000875af11580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610412919061112b565b50819250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e35fb684336040518363ffffffff1660e01b8152600401610473929190611158565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b5050505082935050505061070d565b600034836104be91906111b0565b9050600081346104ce91906111e4565b83346104da9190611218565b6104e49190611289565b905080871015610529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105209061132c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610588939291906110bc565b6020604051808303816000875af11580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb919061112b565b508134600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190611361565b6106699190611218565b6106739190611289565b9450600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e35fb686336040518363ffffffff1660e01b81526004016106d2929190611158565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505084955050505050505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161076f9190610f29565b602060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190611361565b905090565b6107bd610cc3565b6107c76000610d4a565b565b60006107d3610712565b905060006107ed3434476107e791906111b0565b84610ba4565b905082811015610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611400565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161088f929190611420565b6020604051808303816000875af11580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061112b565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008311610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90611495565b60405180910390fd5b60004790506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df9190611361565b905060008186846109f09190611218565b6109fa9190611289565b905060008287610a08610712565b610a129190611218565b610a1c9190611289565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3a5e7488336040518363ffffffff1660e01b8152600401610a7b929190611158565b600060405180830381600087803b158015610a9557600080fd5b505af1158015610aa9573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610af3573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b51929190611420565b6020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061112b565b5081819550955050505050915091565b60008083118015610bb55750600082115b610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90611501565b60405180910390fd5b6000606385610c039190611218565b905080606485610c139190611218565b610c1d91906111e4565b8382610c299190611218565b610c339190611289565b9150509392505050565b610c45610cc3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb75760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cae9190610f29565b60405180910390fd5b610cc081610d4a565b50565b610ccb610e0e565b73ffffffffffffffffffffffffffffffffffffffff16610ce96108d8565b73ffffffffffffffffffffffffffffffffffffffff1614610d4857610d0c610e0e565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d3f9190610f29565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e2e81610e1b565b8114610e3957600080fd5b50565b600081359050610e4b81610e25565b92915050565b60008060408385031215610e6857610e67610e16565b5b6000610e7685828601610e3c565b9250506020610e8785828601610e3c565b9150509250929050565b600060208284031215610ea757610ea6610e16565b5b6000610eb584828501610e3c565b91505092915050565b610ec781610e1b565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1382610ee8565b9050919050565b610f2381610f08565b82525050565b6000602082019050610f3e6000830184610f1a565b92915050565b6000604082019050610f596000830185610ebe565b610f666020830184610ebe565b9392505050565b600080600060608486031215610f8657610f85610e16565b5b6000610f9486828701610e3c565b9350506020610fa586828701610e3c565b9250506040610fb686828701610e3c565b9150509250925092565b610fc981610f08565b8114610fd457600080fd5b50565b600081359050610fe681610fc0565b92915050565b60006020828403121561100257611001610e16565b5b600061101084828501610fd7565b91505092915050565b600082825260208201905092915050565b7f455448207265636569766564206973206c657373207468616e206d696e696d7560008201527f6d20455448206578706563746564000000000000000000000000000000000000602082015250565b6000611086602e83611019565b91506110918261102a565b604082019050919050565b600060208201905081810360008301526110b581611079565b9050919050565b60006060820190506110d16000830186610f1a565b6110de6020830185610f1a565b6110eb6040830184610ebe565b949350505050565b60008115159050919050565b611108816110f3565b811461111357600080fd5b50565b600081519050611125816110ff565b92915050565b60006020828403121561114157611140610e16565b5b600061114f84828501611116565b91505092915050565b600060408201905061116d6000830185610ebe565b61117a6020830184610f1a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111bb82610e1b565b91506111c683610e1b565b92508282039050818111156111de576111dd611181565b5b92915050565b60006111ef82610e1b565b91506111fa83610e1b565b925082820190508082111561121257611211611181565b5b92915050565b600061122382610e1b565b915061122e83610e1b565b925082820261123c81610e1b565b9150828204841483151761125357611252611181565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061129482610e1b565b915061129f83610e1b565b9250826112af576112ae61125a565b5b828204905092915050565b7f496e73756666696369656e7420616d6f756e74206f6620746f6b656e7320707260008201527f6f76696465640000000000000000000000000000000000000000000000000000602082015250565b6000611316602683611019565b9150611321826112ba565b604082019050919050565b6000602082019050818103600083015261134581611309565b9050919050565b60008151905061135b81610e25565b92915050565b60006020828403121561137757611376610e16565b5b60006113858482850161134c565b91505092915050565b7f546f6b656e7320726563656976656420617265206c657373207468616e206d6960008201527f6e696d756d20746f6b656e732065787065637465640000000000000000000000602082015250565b60006113ea603583611019565b91506113f58261138e565b604082019050919050565b60006020820190508181036000830152611419816113dd565b9050919050565b60006040820190506114356000830185610f1a565b6114426020830184610ebe565b9392505050565b7f4e6f7420656e6f75676820546f6b656e73000000000000000000000000000000600082015250565b600061147f601183611019565b915061148a82611449565b602082019050919050565b600060208201905081810360008301526114ae81611472565b9050919050565b7f4e6f204c69717569646974792121210000000000000000000000000000000000600082015250565b60006114eb600f83611019565b91506114f6826114b5565b602082019050919050565b6000602082019050818103600083015261151a816114de565b905091905056fea2646970667358221220e3e7f59fdf1bd6c479eab723230ff2685b709b33a838ba28afeb2d754b4bc72d64736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063829eff2a11610059578063829eff2a1461011b5780638da5cb5b146101375780639c8f9f2314610162578063ec6341b3146101a0578063f2fde38b146101dd5761008b565b80631c9629f81461008d57806351c6590a146100a957806359bf5d39146100d9578063715018a6146101045761008b565b5b005b6100a760048036038101906100a29190610e51565b610206565b005b6100c360048036038101906100be9190610e91565b610354565b6040516100d09190610ecd565b60405180910390f35b3480156100e557600080fd5b506100ee610712565b6040516100fb9190610ecd565b60405180910390f35b34801561011057600080fd5b506101196107b5565b005b61013560048036038101906101309190610e91565b6107c9565b005b34801561014357600080fd5b5061014c6108d8565b6040516101599190610f29565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190610e91565b610901565b604051610197929190610f44565b60405180910390f35b3480156101ac57600080fd5b506101c760048036038101906101c29190610f6d565b610ba4565b6040516101d49190610ecd565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190610fec565b610c3d565b005b6000610210610712565b9050600061021f848347610ba4565b905082811015610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b9061109c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016102c3939291906110bc565b6020604051808303816000875af11580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610306919061112b565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561034d573d6000803e3d6000fd5b5050505050565b60008060004790506000610366610712565b9050600081036104b057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016103cf939291906110bc565b6020604051808303816000875af11580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610412919061112b565b50819250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e35fb684336040518363ffffffff1660e01b8152600401610473929190611158565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b5050505082935050505061070d565b600034836104be91906111b0565b9050600081346104ce91906111e4565b83346104da9190611218565b6104e49190611289565b905080871015610529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105209061132c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610588939291906110bc565b6020604051808303816000875af11580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb919061112b565b508134600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190611361565b6106699190611218565b6106739190611289565b9450600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e35fb686336040518363ffffffff1660e01b81526004016106d2929190611158565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505084955050505050505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161076f9190610f29565b602060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b09190611361565b905090565b6107bd610cc3565b6107c76000610d4a565b565b60006107d3610712565b905060006107ed3434476107e791906111b0565b84610ba4565b905082811015610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611400565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161088f929190611420565b6020604051808303816000875af11580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061112b565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008311610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90611495565b60405180910390fd5b60004790506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df9190611361565b905060008186846109f09190611218565b6109fa9190611289565b905060008287610a08610712565b610a129190611218565b610a1c9190611289565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3a5e7488336040518363ffffffff1660e01b8152600401610a7b929190611158565b600060405180830381600087803b158015610a9557600080fd5b505af1158015610aa9573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610af3573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b51929190611420565b6020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061112b565b5081819550955050505050915091565b60008083118015610bb55750600082115b610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90611501565b60405180910390fd5b6000606385610c039190611218565b905080606485610c139190611218565b610c1d91906111e4565b8382610c299190611218565b610c339190611289565b9150509392505050565b610c45610cc3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb75760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cae9190610f29565b60405180910390fd5b610cc081610d4a565b50565b610ccb610e0e565b73ffffffffffffffffffffffffffffffffffffffff16610ce96108d8565b73ffffffffffffffffffffffffffffffffffffffff1614610d4857610d0c610e0e565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d3f9190610f29565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e2e81610e1b565b8114610e3957600080fd5b50565b600081359050610e4b81610e25565b92915050565b60008060408385031215610e6857610e67610e16565b5b6000610e7685828601610e3c565b9250506020610e8785828601610e3c565b9150509250929050565b600060208284031215610ea757610ea6610e16565b5b6000610eb584828501610e3c565b91505092915050565b610ec781610e1b565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1382610ee8565b9050919050565b610f2381610f08565b82525050565b6000602082019050610f3e6000830184610f1a565b92915050565b6000604082019050610f596000830185610ebe565b610f666020830184610ebe565b9392505050565b600080600060608486031215610f8657610f85610e16565b5b6000610f9486828701610e3c565b9350506020610fa586828701610e3c565b9250506040610fb686828701610e3c565b9150509250925092565b610fc981610f08565b8114610fd457600080fd5b50565b600081359050610fe681610fc0565b92915050565b60006020828403121561100257611001610e16565b5b600061101084828501610fd7565b91505092915050565b600082825260208201905092915050565b7f455448207265636569766564206973206c657373207468616e206d696e696d7560008201527f6d20455448206578706563746564000000000000000000000000000000000000602082015250565b6000611086602e83611019565b91506110918261102a565b604082019050919050565b600060208201905081810360008301526110b581611079565b9050919050565b60006060820190506110d16000830186610f1a565b6110de6020830185610f1a565b6110eb6040830184610ebe565b949350505050565b60008115159050919050565b611108816110f3565b811461111357600080fd5b50565b600081519050611125816110ff565b92915050565b60006020828403121561114157611140610e16565b5b600061114f84828501611116565b91505092915050565b600060408201905061116d6000830185610ebe565b61117a6020830184610f1a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111bb82610e1b565b91506111c683610e1b565b92508282039050818111156111de576111dd611181565b5b92915050565b60006111ef82610e1b565b91506111fa83610e1b565b925082820190508082111561121257611211611181565b5b92915050565b600061122382610e1b565b915061122e83610e1b565b925082820261123c81610e1b565b9150828204841483151761125357611252611181565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061129482610e1b565b915061129f83610e1b565b9250826112af576112ae61125a565b5b828204905092915050565b7f496e73756666696369656e7420616d6f756e74206f6620746f6b656e7320707260008201527f6f76696465640000000000000000000000000000000000000000000000000000602082015250565b6000611316602683611019565b9150611321826112ba565b604082019050919050565b6000602082019050818103600083015261134581611309565b9050919050565b60008151905061135b81610e25565b92915050565b60006020828403121561137757611376610e16565b5b60006113858482850161134c565b91505092915050565b7f546f6b656e7320726563656976656420617265206c657373207468616e206d6960008201527f6e696d756d20746f6b656e732065787065637465640000000000000000000000602082015250565b60006113ea603583611019565b91506113f58261138e565b604082019050919050565b60006020820190508181036000830152611419816113dd565b9050919050565b60006040820190506114356000830185610f1a565b6114426020830184610ebe565b9392505050565b7f4e6f7420656e6f75676820546f6b656e73000000000000000000000000000000600082015250565b600061147f601183611019565b915061148a82611449565b602082019050919050565b600060208201905081810360008301526114ae81611472565b9050919050565b7f4e6f204c69717569646974792121210000000000000000000000000000000000600082015250565b60006114eb600f83611019565b91506114f6826114b5565b602082019050919050565b6000602082019050818103600083015261151a816114de565b905091905056fea2646970667358221220e3e7f59fdf1bd6c479eab723230ff2685b709b33a838ba28afeb2d754b4bc72d64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 968,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "antToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Ant)958"
      },
      {
        "astId": 971,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "lpToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LPToken)1391"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Ant)958": {
        "encoding": "inplace",
        "label": "contract Ant",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)1391": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      }
    }
  }
}